package main

import (
	"context"
	"flag"
	"fmt"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/serializer"
	"k8s.io/cli-runtime/pkg/genericclioptions"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/tools/clientcmd"
	"net/http"
	"net/http/pprof"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/golang/glog"
	"github.com/jenkins-x/exposecontroller/controller"
	"github.com/spf13/pflag"
)

const (
	healthPort = 10254
)

var (
	flags = pflag.NewFlagSet("", pflag.ExitOnError)

	configFile = flags.String("config", "/etc/exposecontroller/config.yml",
		`Path to the file that contains the exposecontroller configuration to use`)

	resyncPeriod = flags.Duration("sync-period", 30*time.Second,
		`Relist and confirm services this often.`)

	healthzPort = flags.Int("healthz-port", healthPort, "port for healthz endpoint.")

	profiling = flags.Bool("profiling", true, `Enable profiling via web interface host:port/debug/pprof/`)

	daemon  = flag.Bool("daemon", false, `Run as daemon mode watching changes as it happens.`)
	cleanup = flag.Bool("cleanup", false, `Removes Ingress rules that were generated by exposecontroller`)

	domain                = flag.String("domain", "", "Domain to use with your DNS provider (default: .nip.io).")
	filter                = flag.String("filter", "", "The filter of service names to look for when cleaning up")
	exposer               = flag.String("exposer", "", "Which strategy exposecontroller should use to access applications")
	apiserver             = flag.String("api-server", "", "API server URL")
	consoleurl            = flag.String("console-server", "", "Console URL")
	httpb                 = flag.Bool("http", false, `Use HTTP`)
	watchNamespaces       = flag.String("watch-namespace", "", "Exposecontroller will only look at the provided namespace")
	watchCurrentNamespace = flag.Bool("watch-current-namespace", true, `Exposecontroller will look at the current namespace only - (default: 'true' unless --watch-namespace specified)`)
	services              = flag.String("services", "", "List of comma separated service names which will be exposed, if empty all services from namespace will be considered")
)

func main() {
	ctx := context.Background()
	configFlags := genericclioptions.NewConfigFlags(true)
	configFlags.AddFlags(flags)

	kubeconfig := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(
		clientcmd.NewDefaultClientConfigLoadingRules(),
		&clientcmd.ConfigOverrides{},
	)

	restClientConfig, err := kubeconfig.ClientConfig()
	if err != nil {
		glog.Fatalf("failed to get Kubernetes client config: %v", err)
	}

	kubeClient, err := kubernetes.NewForConfig(restClientConfig)
	if err != nil {
		glog.Fatalf("failed to create Kubernetes clientset: %v", err)
	}

	currentNamespace := os.Getenv("KUBERNETES_NAMESPACE")
	if len(currentNamespace) == 0 {
		currentNamespace, _, err = configFlags.ToRawKubeConfigLoader().Namespace()
		if err != nil {
			glog.Fatalf("Could not find the current namespace: %v", err)
		}
	}

	controllerConfig, exists, err := controller.LoadFile(*configFile)
	if !exists || err != nil {
		if err != nil {
			glog.Warningf("failed to load config file: %s", err)
		}

		cc2 := tryFindConfig(kubeClient, currentNamespace)
		if cc2 == nil {
			// lets try find the ConfigMap in the dev namespace
			resource, err := kubeClient.CoreV1().Namespaces().Get(ctx, currentNamespace, metav1.GetOptions{})
			if err == nil && resource != nil {
				labels := resource.Labels
				if labels != nil {
					ns := labels["team"]
					if ns == "" {
						glog.Warningf("No 'team' label on Namespace %s", currentNamespace)
					} else {
						glog.Infof("trying to find the ConfigMap in the Dev Namespace %s", ns)

						cc2 = tryFindConfig(kubeClient, ns)
					}
				} else {
					glog.Warningf("No labels on Namespace %s", currentNamespace)
				}
			} else {
				glog.Warningf("Failed to load Namespace %s: %s", currentNamespace, err)

				// lets try default to trimming the lasts path from the current namespace
				idx := strings.LastIndex(currentNamespace, "-")
				if idx > 1 {
					ns := currentNamespace[0:idx]
					cc2 = tryFindConfig(kubeClient, ns)
				}
			}
		}
		if cc2 != nil {
			controllerConfig = cc2
		}
	} else {
		glog.Infof("Loaded config file %s", *configFile)
	}
	glog.Infof("Config file before overrides %s", controllerConfig.String())

	if *domain != "" {
		controllerConfig.Domain = *domain
	}
	if *exposer != "" {
		controllerConfig.Exposer = *exposer
	}
	if *apiserver != "" {
		controllerConfig.ApiServer = *apiserver
	}
	if *consoleurl != "" {
		controllerConfig.ConsoleURL = *consoleurl
	}
	if *httpb {
		controllerConfig.HTTP = *httpb
	}

	if *watchCurrentNamespace {
		controllerConfig.WatchCurrentNamespace = *watchCurrentNamespace
	}
	if *watchNamespaces != "" {
		controllerConfig.WatchNamespaces = *watchNamespaces
		controllerConfig.WatchCurrentNamespace = false
	}

	if *services != "" {
		controllerConfig.Services = strings.Split(*services, ",")
	}

	glog.Infof("Config file after overrides %s", controllerConfig.String())

	//watchNamespaces := api.NamespaceAll
	watchNamespaces := controllerConfig.WatchNamespaces
	if controllerConfig.WatchCurrentNamespace {
		if len(currentNamespace) == 0 {
			glog.Fatalf("No current namespace found!")
		}
		watchNamespaces = currentNamespace
	}

	if *cleanup {
		ingress, err := kubeClient.NetworkingV1().Ingresses(watchNamespaces).List(ctx, metav1.ListOptions{})
		if err != nil {
			glog.Fatalf("Could not get ingress rules in namespace %s %v", watchNamespaces, err)
		}

		for _, i := range ingress.Items {
			if i.Annotations["fabric8.io/generated-by"] == "exposecontroller" {
				if filter == nil || strings.Contains(i.Name, *filter) {
					glog.Infof("Deleting ingress %s", i.Name)
					err := kubeClient.NetworkingV1().Ingresses(watchNamespaces).Delete(ctx, i.Name, metav1.DeleteOptions{})
					if err != nil {
						glog.Fatalf("Could not find the current namespace: %v", err)
					}
				}
			}
		}
		return
	}

	if *daemon {
		glog.Infof("Watching services in namespaces: `%s`", watchNamespaces)

		c, err := controller.NewController(kubeClient, restClientConfig, serializer.NewCodecFactory(scheme.Scheme).LegacyCodec(scheme.Scheme.PrioritizedVersionsAllGroups()...), *resyncPeriod, watchNamespaces, controllerConfig)
		if err != nil {
			glog.Fatalf("%s", err)
		}

		go registerHandlers()
		go handleSigterm(c)

		c.Run()
	} else {
		glog.Infof("Running in : `%s`", watchNamespaces)
		c, err := controller.NewController(kubeClient, restClientConfig, serializer.NewCodecFactory(scheme.Scheme).LegacyCodec(scheme.Scheme.PrioritizedVersionsAllGroups()...), *resyncPeriod, watchNamespaces, controllerConfig)
		if err != nil {
			glog.Fatalf("%s", err)
		}

		ticker := time.NewTicker(5 * time.Second)
		quit := make(chan struct{})
		go func() {
			for {
				select {
				case <-ticker.C:
					if c.Hasrun() {
						close(quit)
					}
				case <-quit:
					c.Stop()
					ticker.Stop()
					return
				}
			}
		}()
		// Handle Control-C has well here
		go handleSigterm(c)

		c.Run()
	}
}

func tryFindConfig(kubeClient *kubernetes.Clientset, ns string) *controller.Config {
	var controllerConfig *controller.Config
	ctx := context.Background()
	cm, err := kubeClient.CoreV1().ConfigMaps(ns).Get(ctx, "exposecontroller", metav1.GetOptions{})
	if err == nil {
		glog.Infof("Using ConfigMap exposecontroller to load configuration...")
		text := cm.Data["config.yml"]
		if text != "" {
			controllerConfig, err = controller.Load(text)
			if err != nil {
				glog.Warningf("Could not parse the config text from exposecontroller ConfigMap  %v", err)
			}
			glog.Infof("Loaded ConfigMap exposecontroller to load configuration!")
		}
	} else {
		glog.Warningf("Could not find ConfigMap exposecontroller ConfigMap in namespace %s", ns)

		cm, err = kubeClient.CoreV1().ConfigMaps(ns).Get(ctx, "ingress-config", metav1.GetOptions{})
		if err != nil {
			glog.Warningf("Could not find ConfigMap ingress-config ConfigMap in namespace %s", ns)
		} else {
			glog.Infof("Loaded ConfigMap ingress-config to load configuration!")
			data := cm.Data
			if data != nil {
				controllerConfig, err = controller.MapToConfig(data)
				if err != nil {
					glog.Warningf("Failed to convert Map data %#v from configMap ingress-config in namespace %s due to: %s\n", controllerConfig, ns, err)
				}
			}
		}
	}
	return controllerConfig
}

func registerHandlers() {
	mux := http.NewServeMux()

	if *profiling {
		mux.HandleFunc("/debug/pprof/", pprof.Index)
		mux.HandleFunc("/debug/pprof/profile", pprof.Profile)
		mux.HandleFunc("/debug/pprof/symbol", pprof.Symbol)
	}

	server := &http.Server{
		Addr:    fmt.Sprintf(":%v", *healthzPort),
		Handler: mux,
	}
	glog.Fatal(server.ListenAndServe())
}

func handleSigterm(c *controller.Controller) {
	signalChan := make(chan os.Signal, 1)
	signal.Notify(signalChan, syscall.SIGINT, syscall.SIGTERM)
	sig := <-signalChan
	glog.Infof("Received %s, shutting down", sig)
	c.Stop()
}
